{"version":3,"sources":["js/imageprocessor.js","js/markupgenerator.js","js/main.js"],"names":["resizeImage","imageData","newWidth","console","log","oldWidth","width","oldHeight","height","blockWidth","Math","floor","newHeight","newData","ImageData","data","i","j","averageColor","x","y","pixel","getPixelColors","component","round","coordR","grayscale","length","avg","alpha","avgNonTransparent","brightness","coef","brightened","contrast","max","reduce","acc","val","idx","min","middle","contr","autoContrast","levels","mapArray","brickColor","forEach","el","defaultMappingTemplate","id","border","color","mapDataToBricks","mappingTemplate","mappedData","mapping","brickIndex","showBricks","canvas","brickSize","ctx","getContext","clearRect","map","fillStyle","find","raw","column","fillRect","showBrickStats","domContainer","statsHTML","elem","quantity","filter","join","innerHTML","options","size","ref","handleOptionChange","e","target","name","parseInt","value","resizedImageData","processImage","handleImageInput","files","imageFile","reader","readAsDataURL","onloadend","image","src","result","onload","ev","virtualCanvas","document","createElement","virtualContext","drawImage","getImageData","newCanvas","getElementById","newCanvasContext","putImageData","brickCanvas","querySelector","bricks","FileReader","Image","imgInput","addEventListener","optionsForm","querySelectorAll"],"mappings":"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","file":"main.642cd1ec.js","sourceRoot":"../src","sourcesContent":["export function resizeImage(imageData, newWidth) {\n  // 1. Count the amount of pixels in a block\n  console.log('imageData = ', imageData);\n  const oldWidth = imageData.width;\n  const oldHeight = imageData.height;\n  const blockWidth = Math.floor(oldWidth / newWidth) || 1;\n  const newHeight = Math.floor(oldHeight / blockWidth);\n  console.log('block width = ', blockWidth);\n  console.log('new dimensions = ', newWidth, 'x', newHeight);\n  // 2. Read block by coords\n  const newData = new ImageData(newWidth, newHeight);\n  const { data } = newData;\n  for (let i = 0; i < newWidth; i += 1) {\n    for (let j = 0; j < newHeight; j += 1) {\n      const averageColor = [0, 0, 0, 0];\n      for (let x = i * blockWidth; x < (i + 1) * blockWidth; x += 1) {\n        for (let y = j * blockWidth; y < (j + 1) * blockWidth; y += 1) {\n          const pixel = getPixelColors(x, y, imageData);\n          // 3. Count average color of block}\n          let component = 0;\n          while (component < 4) {\n            averageColor[component] += pixel[component] / blockWidth ** 2;\n            component += 1;\n          }\n        }\n      }\n      let component = 0;\n      while (component < 4) {\n        data[i * 4 + j * newWidth * 4 + component] = Math.round(averageColor[component]);\n        component += 1;\n      }\n    }\n  }\n  console.log(newData);\n  // 4. Return image\n  return newData;\n}\n\nfunction getPixelColors(x, y, imageData) {\n  const coordR = y * (imageData.width * 4) + x * 4;\n  const red = imageData.data[coordR];\n  const green = imageData.data[coordR + 1];\n  const blue = imageData.data[coordR + 2];\n  const alpha = imageData.data[coordR + 3];\n  return [red, green, blue, alpha];\n}\n\nexport function grayscale({ data }) {\n  for (let i = 0; i < data.length; i += 4) {\n    const avg = Math.round((data[i] + data[i + 1] + data[i + 2]) / 3);\n    const alpha = data[i + 3];\n    const avgNonTransparent = (avg * alpha) / 255 + 255 - alpha;\n    data[i] = avgNonTransparent; // red\n    data[i + 1] = avgNonTransparent; // green\n    data[i + 2] = avgNonTransparent; // blue\n    data[i + 3] = 255; // alpha\n  }\n}\n\nexport function brightness({ data }, coef = 0) {\n  console.log('brightness = ', coef);\n  for (let i = 0; i < data.length; i += 4) {\n    const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n    let brightened = Math.round(avg + (avg * coef) / 10);\n    brightened = brightened > 255 ? 255 : brightened;\n    data[i] = brightened; // red\n    data[i + 1] = brightened; // green\n    data[i + 2] = brightened; // blue\n  }\n}\n\nexport function contrast({ data }, coef = 1) {\n  const max = data.reduce((acc, val, idx) => ((idx + 1) % 4 ? (val > acc ? val : acc) : acc), 0);\n  const min = data.reduce((acc, val, idx) => ((idx + 1) % 4 ? (val < acc ? val : acc) : acc), 255);\n  const middle = (max - min) / 2 + min;\n  console.log('min = ', min, ', max = ', max, ', middle = ', middle, ', coef = ', coef);\n  if (min === max) return;\n  for (let i = 0; i < data.length; i += 4) {\n    const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n    let contr = Math.round(avg + (avg - middle) * coef);\n    contr = contr > 255 ? 255 : contr < 0 ? 0 : contr;\n    data[i] = contr; // red\n    data[i + 1] = contr; // green\n    data[i + 2] = contr; // blue\n  }\n}\n\nexport function autoContrast({ data }, coef = 1) {\n  let max = data.reduce((acc, val, idx) => ((idx + 1) % 4 ? (val > acc ? val : acc) : acc), 0);\n  let min = data.reduce((acc, val, idx) => ((idx + 1) % 4 ? (val < acc ? val : acc) : acc), 255);\n  console.log('min = ', min, ', max = ', max, ', coef = ', coef);\n  min = Math.round(min * coef);\n  max = Math.round(255 - (255 - max) * coef);\n  min = min > 47 ? 47 : min;\n  max = max < 160 ? 160 : max;\n  console.log('min = ', min, ', max = ', max);\n  if (min === max || (min === 0 && max === 255)) return;\n  for (let i = 0; i < data.length; i += 4) {\n    const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n    let contr = Math.round((avg - min) * (255 / (max - min)));\n    contr = contr > 255 ? 255 : contr;\n    data[i] = contr; // red\n    data[i + 1] = contr; // green\n    data[i + 2] = contr; // blue\n  }\n}\n\nexport function levels({ data }, mapArray = [63, 127, 191, 255]) {\n  for (let i = 0; i < data.length; i += 4) {\n    const avg = Math.round((data[i] + data[i + 1] + data[i + 2]) / 3);\n    let brickColor = 0;\n    mapArray.forEach(el => {\n      if (avg >= el - 16 && el > brickColor) brickColor = el;\n    });\n    data[i] = brickColor; // red\n    data[i + 1] = brickColor; // green\n    data[i + 2] = brickColor; // blue\n  }\n}\n\nconst defaultMappingTemplate = [\n  { id: 0, border: 0, color: '#000000' },\n  { id: 1, border: 47, color: '#2f2f2f' },\n  { id: 2, border: 111, color: '#6f6f6f' },\n  { id: 3, border: 175, color: '#afafaf' },\n  { id: 4, border: 239, color: '#efefef' },\n];\n\nexport function mapDataToBricks({ data, width }, mappingTemplate = defaultMappingTemplate) {\n  const mappedData = { data: [], width, mapping: mappingTemplate }; // output format\n  for (let i = 0; i * 4 < data.length; i += 1) {\n    const avg = Math.round((data[i * 4] + data[i * 4 + 1] + data[i * 4 + 2]) / 3);\n    let brickIndex = 0;\n    mappingTemplate.forEach(el => {\n      if (avg >= el.border && el.id > brickIndex) brickIndex = el.id;\n    });\n    mappedData.data[i] = brickIndex;\n  }\n  return mappedData;\n}\n\nexport function showBricks({ data, width, mapping }, canvas, brickSize = 16) {\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  canvas.width = width * brickSize;\n  canvas.height = (data.length / width) * brickSize;\n  data.map((val, idx) => {\n    ctx.fillStyle = mapping.find(el => el.id === val)?.color || 0;\n    const raw = idx % width;\n    const column = Math.floor(idx / width);\n    ctx.fillRect(raw * brickSize, column * brickSize, brickSize - 1, brickSize - 1);\n  });\n}\n","export function showBrickStats(mappedData, domContainer) {\n  // mappedData = { data: [], width, mapping: [{id, border, color}] }\n  const { data, mapping } = mappedData;\n  const statsHTML = mapping\n    .map(elem => {\n      const quantity = data.filter(el => el === elem.id).length;\n      return `<li class=\"stats_item\"><div class=\"stats_sample\" id=\"${elem.id}\" style=\"--color-sample:${elem.color}\"></div><span>${quantity} pieces</span></li>`;\n    })\n    .join('');\n  domContainer.innerHTML = '<ul class=\"stats_list\">' + statsHTML + '</ul>';\n}\n","import {\n  resizeImage,\n  brightness,\n  contrast,\n  grayscale,\n  levels,\n  mapDataToBricks,\n  showBricks,\n} from './imageprocessor';\nimport { showBrickStats } from './markupgenerator';\n\nconst options = {\n  size: 25,\n  brightness: 0,\n  contrast: 0,\n};\n\nconst ref = {};\nref.reader = new FileReader();\nref.image = new Image();\n\nref.imgInput = document.getElementById('imageInput');\nref.imgInput.addEventListener('change', handleImageInput);\n\nref.optionsForm = document.querySelector('#options');\nref.optionsForm\n  .querySelectorAll('input')\n  .forEach(el => el.addEventListener('change', handleOptionChange));\n\nfunction handleOptionChange(e) {\n  options[e.target.name] = parseInt(e.target.value);\n  console.log(options);\n  if (ref.imageData) {\n    ref.resizedImageData = resizeImage(ref.imageData, options.size);\n    processImage(ref.resizedImageData);\n  }\n}\n\nfunction handleImageInput(e) {\n  if (e.target.files) {\n    const imageFile = e.target.files[0]; //here we get the image file\n    ref.reader.readAsDataURL(imageFile);\n    ref.reader.onloadend = function (e) {\n      ref.image.src = e.target.result; // Assigns converted image to image object\n      ref.image.onload = function (ev) {\n        const virtualCanvas = document.createElement('canvas'); // Creates a canvas object\n        const virtualContext = virtualCanvas.getContext('2d'); // Creates a contect object\n        virtualCanvas.width = ref.image.width; // Assigns image's width to canvas\n        virtualCanvas.height = ref.image.height; // Assigns image's height to canvas\n        virtualContext.drawImage(ref.image, 0, 0); // Draws the image on canvas\n        // let imgData = virtualCanvas.toDataURL('image/jpeg', 0.75); // Assigns image base64 string in jpeg format to a variable\n        ref.imageData = virtualContext.getImageData(\n          0,\n          0,\n          virtualCanvas.width,\n          virtualCanvas.height,\n        );\n        ref.resizedImageData = resizeImage(ref.imageData, options.size);\n        processImage(ref.resizedImageData);\n      };\n    };\n  }\n}\n\nfunction processImage(imageData) {\n  const newCanvas = document.getElementById('myCanvas');\n  const newCanvasContext = newCanvas.getContext('2d');\n  const { width, height } = imageData;\n  newCanvas.width = imageData.width * 2;\n  newCanvas.height = imageData.height * 2;\n  newCanvasContext.putImageData(imageData, 0, 0);\n  grayscale(imageData);\n  newCanvasContext.putImageData(imageData, width, 0);\n  brightness(imageData, options.brightness);\n  contrast(imageData, options.contrast / 2);\n  newCanvasContext.putImageData(imageData, 0, height);\n  levels(imageData);\n  newCanvasContext.putImageData(imageData, width, height);\n\n  const brickCanvas = document.querySelector('#brickCanvas');\n  const bricks = mapDataToBricks(imageData);\n  showBricks(bricks, brickCanvas);\n\n  showBrickStats(bricks, document.querySelector('#brickStats'));\n}\n"]}