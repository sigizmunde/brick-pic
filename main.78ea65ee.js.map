{"version":3,"sources":["js/imageprocessor.js","js/main.js"],"names":["resizeImage","imageData","newWidth","console","log","oldWidth","width","oldHeight","height","blockWidth","Math","floor","newHeight","newData","ImageData","data","i","j","averageColor","x","y","pixel","getPixelColors","component","round","coordR","grayscale","length","avg","alpha","avgNonTransparent","brightness","coef","brightened","contrast","max","reduce","acc","val","idx","min","middle","contr","autoContrast","levels","mapArray","brickColor","forEach","el","defaultMappingTemplate","id","border","mapDataToBricks","mappingTemplate","mappedData","mapping","brickIndex","showBricks","canvas","brickSize","ctx","getContext","clearRect","map","grayColor","channel","find","toString","padStart","fillStyle","raw","column","fillRect","options","size","ref","handleOptionChange","e","target","name","parseInt","value","resizedImageData","processImage","handleImageInput","files","imageFile","reader","readAsDataURL","onloadend","image","src","result","onload","ev","virtualCanvas","document","createElement","virtualContext","drawImage","getImageData","newCanvas","getElementById","newCanvasContext","putImageData","brickCanvas","querySelector","bricks","FileReader","Image","imgInput","addEventListener","optionsForm","querySelectorAll"],"mappings":"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","file":"main.78ea65ee.js","sourceRoot":"../src","sourcesContent":["export function resizeImage(imageData, newWidth) {\n  // 1. Count the amount of pixels in a block\n  console.log('imageData = ', imageData);\n  const oldWidth = imageData.width;\n  const oldHeight = imageData.height;\n  const blockWidth = Math.floor(oldWidth / newWidth) || 1;\n  const newHeight = Math.floor(oldHeight / blockWidth);\n  console.log('block width = ', blockWidth);\n  console.log('new dimensions = ', newWidth, 'x', newHeight);\n  // 2. Read block by coords\n  const newData = new ImageData(newWidth, newHeight);\n  const { data } = newData;\n  for (let i = 0; i < newWidth; i += 1) {\n    for (let j = 0; j < newHeight; j += 1) {\n      const averageColor = [0, 0, 0, 0];\n      for (let x = i * blockWidth; x < (i + 1) * blockWidth; x += 1) {\n        for (let y = j * blockWidth; y < (j + 1) * blockWidth; y += 1) {\n          const pixel = getPixelColors(x, y, imageData);\n          // 3. Count average color of block}\n          let component = 0;\n          while (component < 4) {\n            averageColor[component] += pixel[component] / blockWidth ** 2;\n            component += 1;\n          }\n        }\n      }\n      let component = 0;\n      while (component < 4) {\n        data[i * 4 + j * newWidth * 4 + component] = Math.round(averageColor[component]);\n        component += 1;\n      }\n    }\n  }\n  console.log(newData);\n  // 4. Return image\n  return newData;\n}\n\nfunction getPixelColors(x, y, imageData) {\n  const coordR = y * (imageData.width * 4) + x * 4;\n  const red = imageData.data[coordR];\n  const green = imageData.data[coordR + 1];\n  const blue = imageData.data[coordR + 2];\n  const alpha = imageData.data[coordR + 3];\n  return [red, green, blue, alpha];\n}\n\nexport function grayscale({ data }) {\n  for (let i = 0; i < data.length; i += 4) {\n    const avg = Math.round((data[i] + data[i + 1] + data[i + 2]) / 3);\n    const alpha = data[i + 3];\n    const avgNonTransparent = (avg * alpha) / 255 + 255 - alpha;\n    data[i] = avgNonTransparent; // red\n    data[i + 1] = avgNonTransparent; // green\n    data[i + 2] = avgNonTransparent; // blue\n    data[i + 3] = 255; // alpha\n  }\n}\n\nexport function brightness({ data }, coef = 0) {\n  console.log('brightness = ', coef);\n  for (let i = 0; i < data.length; i += 4) {\n    const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n    let brightened = Math.round(avg + (avg * coef) / 10);\n    brightened = brightened > 255 ? 255 : brightened;\n    data[i] = brightened; // red\n    data[i + 1] = brightened; // green\n    data[i + 2] = brightened; // blue\n  }\n}\n\nexport function contrast({ data }, coef = 1) {\n  const max = data.reduce((acc, val, idx) => ((idx + 1) % 4 ? (val > acc ? val : acc) : acc), 0);\n  const min = data.reduce((acc, val, idx) => ((idx + 1) % 4 ? (val < acc ? val : acc) : acc), 255);\n  const middle = (max - min) / 2 + min;\n  console.log('min = ', min, ', max = ', max, ', middle = ', middle, ', coef = ', coef);\n  if (min === max) return;\n  for (let i = 0; i < data.length; i += 4) {\n    const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n    let contr = Math.round(avg + (avg - middle) * coef);\n    contr = contr > 255 ? 255 : contr < 0 ? 0 : contr;\n    data[i] = contr; // red\n    data[i + 1] = contr; // green\n    data[i + 2] = contr; // blue\n  }\n}\n\nexport function autoContrast({ data }, coef = 1) {\n  let max = data.reduce((acc, val, idx) => ((idx + 1) % 4 ? (val > acc ? val : acc) : acc), 0);\n  let min = data.reduce((acc, val, idx) => ((idx + 1) % 4 ? (val < acc ? val : acc) : acc), 255);\n  console.log('min = ', min, ', max = ', max, ', coef = ', coef);\n  min = Math.round(min * coef);\n  max = Math.round(255 - (255 - max) * coef);\n  min = min > 47 ? 47 : min;\n  max = max < 160 ? 160 : max;\n  console.log('min = ', min, ', max = ', max);\n  if (min === max || (min === 0 && max === 255)) return;\n  for (let i = 0; i < data.length; i += 4) {\n    const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n    let contr = Math.round((avg - min) * (255 / (max - min)));\n    contr = contr > 255 ? 255 : contr;\n    data[i] = contr; // red\n    data[i + 1] = contr; // green\n    data[i + 2] = contr; // blue\n  }\n}\n\nexport function levels({ data }, mapArray = [63, 127, 191, 255]) {\n  for (let i = 0; i < data.length; i += 4) {\n    const avg = Math.round((data[i] + data[i + 1] + data[i + 2]) / 3);\n    let brickColor = 0;\n    mapArray.forEach(el => {\n      if (avg >= el - 16 && el > brickColor) brickColor = el;\n    });\n    data[i] = brickColor; // red\n    data[i + 1] = brickColor; // green\n    data[i + 2] = brickColor; // blue\n  }\n}\n\nconst defaultMappingTemplate = [\n  { id: 0, border: 0 },\n  { id: 1, border: 47 },\n  { id: 2, border: 111 },\n  { id: 3, border: 175 },\n  { id: 4, border: 239 },\n];\n\nexport function mapDataToBricks({ data, width }, mappingTemplate = defaultMappingTemplate) {\n  const mappedData = { data: [], width, mapping: mappingTemplate }; // output format\n  for (let i = 0; i * 4 < data.length; i += 1) {\n    const avg = Math.round((data[i * 4] + data[i * 4 + 1] + data[i * 4 + 2]) / 3);\n    let brickIndex = 0;\n    mappingTemplate.forEach(el => {\n      if (avg >= el.border && el.id > brickIndex) brickIndex = el.id;\n    });\n    mappedData.data[i] = brickIndex;\n  }\n  return mappedData;\n}\n\nexport function showBricks({ data, width, mapping }, canvas, brickSize = 16) {\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  canvas.width = width * brickSize;\n  canvas.height = (data.length / width) * brickSize;\n  data.map((val, idx) => {\n    const grayColor = mapping.find(el => el.id === val)?.border || 0;\n    const channel = grayColor.toString(16).padStart(2, '0');\n    ctx.fillStyle = '#' + channel + channel + channel;\n    const raw = idx % width;\n    const column = Math.floor(idx / width);\n    ctx.fillRect(raw * brickSize, column * brickSize, brickSize - 1, brickSize - 1);\n  });\n}\n","import {\n  resizeImage,\n  brightness,\n  contrast,\n  grayscale,\n  levels,\n  mapDataToBricks,\n  showBricks,\n} from './imageprocessor';\n\nconst options = {\n  size: 25,\n  brightness: 0,\n  contrast: 0,\n};\n\nconst ref = {};\nref.reader = new FileReader();\nref.image = new Image();\n\nref.imgInput = document.getElementById('imageInput');\nref.imgInput.addEventListener('change', handleImageInput);\n\nref.optionsForm = document.querySelector('#options');\nref.optionsForm\n  .querySelectorAll('input')\n  .forEach(el => el.addEventListener('change', handleOptionChange));\n\nfunction handleOptionChange(e) {\n  options[e.target.name] = parseInt(e.target.value);\n  console.log(options);\n  if (ref.imageData) {\n    ref.resizedImageData = resizeImage(ref.imageData, options.size);\n    processImage(ref.resizedImageData);\n  }\n}\n\nfunction handleImageInput(e) {\n  if (e.target.files) {\n    const imageFile = e.target.files[0]; //here we get the image file\n    ref.reader.readAsDataURL(imageFile);\n    ref.reader.onloadend = function (e) {\n      ref.image.src = e.target.result; // Assigns converted image to image object\n      ref.image.onload = function (ev) {\n        const virtualCanvas = document.createElement('canvas'); // Creates a canvas object\n        const virtualContext = virtualCanvas.getContext('2d'); // Creates a contect object\n        virtualCanvas.width = ref.image.width; // Assigns image's width to canvas\n        virtualCanvas.height = ref.image.height; // Assigns image's height to canvas\n        virtualContext.drawImage(ref.image, 0, 0); // Draws the image on canvas\n        // let imgData = virtualCanvas.toDataURL('image/jpeg', 0.75); // Assigns image base64 string in jpeg format to a variable\n        ref.imageData = virtualContext.getImageData(\n          0,\n          0,\n          virtualCanvas.width,\n          virtualCanvas.height,\n        );\n        ref.resizedImageData = resizeImage(ref.imageData, options.size);\n        processImage(ref.resizedImageData);\n      };\n    };\n  }\n}\n\nfunction processImage(imageData) {\n  const newCanvas = document.getElementById('myCanvas');\n  const newCanvasContext = newCanvas.getContext('2d');\n  const { width, height } = imageData;\n  newCanvas.width = imageData.width * 2;\n  newCanvas.height = imageData.height * 2;\n  newCanvasContext.putImageData(imageData, 0, 0);\n  grayscale(imageData);\n  newCanvasContext.putImageData(imageData, width, 0);\n  brightness(imageData, options.brightness);\n  contrast(imageData, options.contrast / 2);\n  newCanvasContext.putImageData(imageData, 0, height);\n  levels(imageData);\n  newCanvasContext.putImageData(imageData, width, height);\n\n  const brickCanvas = document.querySelector('#brickCanvas');\n  const bricks = mapDataToBricks(imageData);\n  showBricks(bricks, brickCanvas);\n}\n"]}